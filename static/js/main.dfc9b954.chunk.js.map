{"version":3,"sources":["components/task03/Counter.module.css","components/common/myInput.module.css","components/common/MyInput.tsx","components/common/CustomButton.tsx","components/task03/Counter.tsx","components/common/CustomCheckboxContainer.tsx","components/task04/ShowCustomCompoents.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MyInput","props","className","s","text_field","TextField","variant","value","onChange","e","currentValue","currentTarget","undefined","onKeyPress","charCode","CustomButton","Button","onClick","Counter","useState","name","setName","setValue","increaseValue","id","uuidv4","alert","content","content__inner","content__text","length","content__input","currentKey","CustomCheckbox","Checkbox","checked","isChecked","ShowCustomComponents","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,eAAiB,gCAAgC,cAAgB,+BAA+B,eAAiB,kC,mBCAtKD,EAAOC,QAAU,CAAC,WAAa,8B,yOCUlBC,EAAsC,SAACC,GAkBhD,OAAO,yBAAKC,UAAWC,IAAEC,YACrB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,WAAYC,MAAON,EAAMM,MAAOC,SAjBvC,SAACC,GACd,IAAMC,EAAeD,EAAEE,cAAcJ,WAEOK,IAAjBF,GAA+C,OAAjBA,GAEjCT,EAAMO,UAC1BP,EAAMO,SAASE,IAWqDG,WAPzD,SAACJ,GACbA,EAAEK,UAAYb,EAAMY,YACnBZ,EAAMY,WAAWJ,EAAEK,e,QChBlBC,EAAgD,SAACd,GAQ1D,OAAO,oCACH,kBAACe,EAAA,EAAD,CAAQV,QAAQ,YAAYW,QAPhB,WACRhB,EAAMgB,SACNhB,EAAMgB,YAKqChB,EAAMM,SCPhDW,EAAU,WAAO,IAAD,EAGHC,mBAAiB,IAHd,mBAGpBC,EAHoB,KAGdC,EAHc,OAIDF,mBAA6B,IAJ5B,mBAIpBZ,EAJoB,KAIbe,EAJa,KAMnBC,EAAgB,WACdH,IACAE,EAAS,GAAD,mBAAKf,GAAL,CAAY,CAACiB,GAAIC,cAAUL,WACnCM,MAAM,UAAD,OAAWN,KAEpBC,EAAQ,KAeZ,OAAO,yBAAKnB,UAAWC,IAAEwB,SACrB,yBAAKzB,UAAWC,IAAEyB,gBACd,yBAAK1B,UAAWC,IAAE0B,eACd,8BAAOtB,EAAMuB,SAEjB,yBAAK5B,UAAWC,IAAE4B,gBACd,kDACA,kBAAC,EAAD,CAASxB,MAAOa,EAAMZ,SAXT,SAACE,GACtBW,EAAQX,IAUkDG,WAlB3C,SAACmB,GACG,KAAfA,GACAT,OAiBI,kBAAC,EAAD,CAAcN,QAASM,EAAehB,MAAO,iB,QCpBhD0B,EAAoD,SAAChC,GAY9D,OAAO,oCACH,kBAACiC,EAAA,EAAD,CAAUC,QAASlC,EAAMmC,UAAW5B,SAXvB,SAACC,GACd,IAAIF,EAAQE,EAAEE,cAAcwB,aAESvB,IAAVL,GAAiC,OAAVA,GAEzBN,EAAMO,UAC3BP,EAAMO,SAASD,QC5Bd8B,EAAuB,WAChC,OAAO,oCACH,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAc9B,MAAO,YACrB,kBAAC,EAAD,QCSO+B,MAXf,WACE,OACE,yBAAKpC,UAAU,OAGd,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDeqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dfc9b954.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Counter_content__ZuwO5\",\"content__inner\":\"Counter_content__inner__34QDE\",\"content__text\":\"Counter_content__text__3IBgV\",\"content__input\":\"Counter_content__input__2Xft5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text_field\":\"myInput_text_field__3Q-JL\"};","import React, { ChangeEvent, KeyboardEvent } from \"react\";\r\nimport s from './myInput.module.css';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype MyInputPropsType = {\r\n    value?: string,\r\n    onChange?: (value: string) => void\r\n    onKeyPress? : (currentKey:number) => void\r\n}\r\n\r\nexport const MyInput: React.FC<MyInputPropsType> = (props) => {\r\n\r\n    const onChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        const currentValue = e.currentTarget.value\r\n\r\n        const unvalidConditions = (currentValue !== undefined && currentValue !== null)\r\n\r\n        if(unvalidConditions && props.onChange){\r\n            props.onChange(currentValue)\r\n        }\r\n    }\r\n\r\n    const onKeyPress = (e:KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.charCode && props.onKeyPress){\r\n            props.onKeyPress(e.charCode)\r\n        }\r\n    }\r\n\r\n    return <div className={s.text_field}>\r\n        <TextField  variant=\"outlined\"  value={props.value} onChange={onChange} onKeyPress={onKeyPress}/>\r\n    </div>\r\n}","import React from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\ntype CustomButtonPropsType = {\r\n    value?: string\r\n    onClick?: () => void\r\n}\r\n\r\nexport const CustomButton: React.FC<CustomButtonPropsType> = (props) => {\r\n\r\n    const onClick = () => {\r\n        if (props.onClick) {\r\n            props.onClick()\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <Button variant=\"contained\" onClick={onClick}>{props.value}</Button>\r\n    </>\r\n}","import React, {useState} from \"react\";\r\nimport s from './Counter.module.css'\r\nimport {v4 as uuidv4} from 'uuid'\r\nimport {MyInput} from \"../common/MyInput\";\r\nimport { CustomButton } from \"../common/CustomButton\";\r\n\r\ntype DataObjType = {\r\n    id: string\r\n    name: string | number\r\n}\r\n\r\nexport const Counter = () => {\r\n\r\n\r\n    let [name, setName] = useState<string>('')\r\n    let [value, setValue] = useState<Array<DataObjType>>([])\r\n\r\n    const increaseValue = () => {\r\n        if (name) {\r\n            setValue([...value, {id: uuidv4(), name}])\r\n            alert(`Hello, ${name}`)\r\n        }\r\n        setName('')\r\n    }\r\n\r\n\r\n    const onKeyPress = (currentKey: number) => {\r\n        if (currentKey === 13) {\r\n            increaseValue();\r\n        }\r\n\r\n    }\r\n\r\n    const changeInputValue = (currentValue:string): void => {\r\n        setName(currentValue)\r\n    }\r\n\r\n    return <div className={s.content}>\r\n        <div className={s.content__inner}>\r\n            <div className={s.content__text}>\r\n                <span>{value.length}</span>\r\n            </div>\r\n            <div className={s.content__input}>\r\n                <span>Enter your name:</span>\r\n                <MyInput value={name} onChange={changeInputValue} onKeyPress={onKeyPress}/>\r\n                <CustomButton onClick={increaseValue} value={'increase'}/>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\n\r\n\r\nexport const CustomCheckboxContainer = () => {\r\n\r\n    const [value, setValue] = useState<boolean>(false)\r\n\r\n    const onChange = (value: boolean) => {\r\n        setValue(value)\r\n    }\r\n\r\n    return <>\r\n        <CustomCheckbox isChecked={value} onChange={onChange}/>\r\n    </>\r\n}\r\n\r\n\r\n\r\n\r\ntype CustomCheckboxPropsType = {\r\n    isChecked?: boolean,\r\n    onChange?: (value: boolean) => void\r\n}\r\n\r\nexport const CustomCheckbox: React.FC<CustomCheckboxPropsType> = (props) => {\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.checked\r\n\r\n        const unvalidConditions = (value !== undefined && value !== null)\r\n\r\n        if (unvalidConditions && props.onChange) {\r\n            props.onChange(value)\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <Checkbox checked={props.isChecked} onChange={onChange}/>\r\n    </>\r\n}","import React from \"react\";\r\nimport {MyInput} from \"../common/MyInput\";\r\nimport {CustomButton} from \"../common/CustomButton\";\r\nimport {CustomCheckbox} from \"../common/CustomCheckboxContainer\";\r\n\r\nexport const ShowCustomComponents = () => {\r\n    return <>\r\n        <MyInput/>\r\n        <CustomButton value={'default'}/>\r\n        <CustomCheckbox/>\r\n    </>\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport { Counter } from './components/task03/Counter';\nimport {Messages} from \"./components/task01/Messages\";\nimport { ListOfTasksHOC } from './components/task02/listOfTasksHOC';\nimport { ShowCustomComponents } from './components/task04/ShowCustomCompoents';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     {/*<Messages />*/}\n     {/*<ListOfTasksHOC />*/}\n     <Counter />\n     <ShowCustomComponents />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}